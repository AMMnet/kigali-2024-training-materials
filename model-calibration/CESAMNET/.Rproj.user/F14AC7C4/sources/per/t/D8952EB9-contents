functions {
  real[] sir(real t, real[] y, real[] theta, 
             real[] x_r, int[] x_i) {
    
     int Nh = x_i[1];
     int Nm = x_i[2];

     real pih = x_r[1];
     real beta1 = x_r[2];
     real beta2 = x_r[3];
     real b4 = x_r[4];
     real beta4= x_r[5];
     real muh = x_r[6];
     real omega = x_r[7];
     real sigma1= x_r[8];
     real gammah = x_r[9];
     real phih= x_r[10];
     real deltah = x_r[11];
     real pim = x_r[12];
     real mum= x_r[13];
     real sigma2 = x_r[14];
     real Lambdah;
     real Lambdam;
     real p_phi;
     real Seasonality;
     real phi1;
     real phi2;
     real PIE;
     real w;
     real s;
     
     real dSh_dt;
      real dEh_dt;
      real dIh_dt;
      real dRh_dt;
      real dSm_dt;
      real dEm_dt;
      real dIm_dt;
      real dInci_dt;
      
      real Sh = y[1];
      real Eh = y[2];
      real Ih = y[3];
      real Rh = y[4];
      real Sm = y[5];
      real Em = y[6];
      real Im = y[7];
      real inci = y[8];
      
      real I0 = theta[1];
      real b1 = theta[2];
      real b2= theta[3];
      real tauh = theta[4];
      real rho = theta[5];
      PIE = 22.0/7;
      w = 2*PIE/52; //
     // phi2 = 0.8;//Amplitude;
       phi1 = 0.8;// Amplitude
      s=25;//horizontal phase shift
      
      Lambdah = (b1*beta1+b2*beta2)*Im/Nh;
      Lambdam = beta4*b4*Ih/Nh;
      Seasonality=(1+ phi1*cos(w*(t-s)));
      
      dSh_dt = pih -Seasonality*Lambdah*Sh-muh*Sh+omega*Rh;
      dEh_dt = Seasonality*Lambdah * Sh - (sigma1+muh)*Eh;
      dIh_dt =  sigma1*Eh - (muh+gammah+phih+deltah)*Ih;
      dRh_dt =gammah*Ih+phih * Ih-(muh+omega)*Rh;
      dSm_dt = pim -Seasonality*Lambdam*Sm-mum*Sm;
      dEm_dt = Seasonality*Lambdam * Sm - (sigma2+mum) * Em;
      dIm_dt =  sigma2 * Em - muh * Im;
      dInci_dt = sigma1* Eh;
      
      return {dSh_dt, dEh_dt, dIh_dt, dRh_dt, dSm_dt, dEm_dt, dIm_dt, dInci_dt};// dSw_dt, dEw_dt, dIw_dt, dRw_dt, dInci_dt};
}
}

data { // this one contains fixed params
  int<lower=1> n_days;
  real y0_vars[7]; //initial conditions only
  real t0;
  real ts[n_days];
  int cases[n_days];
  int Nh;
  int Nm;
  real p_phi;

  real pih;
  real beta1;
  real beta2;
  real b4;
  real beta4;
  real omega;
  real sigma1;
  real muh;
  real gammah;
  real phih;
  real deltah;
  real pim;
  real mum;
  real sigma2;
}
// declare the dimension of fixed params and list them
transformed data {
  int x_i[2];
  real x_r[14];
  
  x_i[1] = Nh;
  x_i[2] = Nm;

  x_r[1] = pih;
  x_r[2] = beta1;
  x_r[3] = beta2;
  x_r[4] = b4;
  x_r[5] =beta4;
  x_r[6] = muh;
  x_r[7] = omega;
  x_r[8] =sigma1;
  x_r[9] = gammah;
  x_r[10] = phih;
  x_r[11] =deltah;
  x_r[12] = pim;
  x_r[13] = mum;
  x_r[14] =sigma2;
}
parameters {
  real<lower=0, upper=1> b1;
  real<lower=0, upper=1> b2;
  real<lower=0, upper=1> rho;
  real<lower=0, upper=1> tauh;
  real<lower=0, upper=300> I0;

  real<lower=0> phi;
}

transformed parameters{
  real y[n_days, 8]; // no of compartm
  real y0[8];  // initial state
  row_vector[7] y0_vec;         // 4 initial conditions vector, out of 5
  row_vector[8] y0_temp;         // State variables +incidence, 5 out of 5
  
  
  vector[n_days] Cum_incidence; // overall case incidence by day
  vector[n_days] Incidence_total; 	// incidence
  
  
  y0_vec = to_row_vector(y0_vars);
  y0_temp[1] =  y0_vec[1];
  y0_temp[2:3] =  y0_vec[2:3]*I0;   // exposed and infected
  y0_temp[4] =  y0_vec[4];// initial susceptibles
  y0_temp[5] =  y0_vec[5];
  y0_temp[6] =  y0_vec[6];   // exposed and infected
  y0_temp[7] =  y0_vec[7]*I0;// initial susceptibles

  y0_temp[8] =  0;   // incidence
  
  
  y0 = to_array_1d(y0_temp);
  
  
  {
    real theta[5];
    theta[1] = I0;
    theta[2] = b1;
    theta[3] = b2;
    theta[4] = rho;
    theta[5] = tauh;
    // 
     y = integrate_ode_rk45(sir, y0, t0, ts, theta, x_r, x_i);
      
      for(i in 1:n_days) {
        Cum_incidence[i] = y[i,8] ;
        if (i == 1){
          Incidence_total[i] =  Cum_incidence[i];
        } else {
          Incidence_total[i] =  Cum_incidence[i] - Cum_incidence[i-1];
        }
      }
      
  }
}


model {
  //priors
   b1 ~uniform(0,1); //upper and lower bound
   b2 ~ uniform(0, 1); //upper and lower bound
   rho ~ uniform(0,1); //upper and lower bound
   tauh ~ uniform(0,1); //upper and lower bound
  //alpha ~ lognormal(1,20);
  I0 ~ lognormal(4, 3);
  //Lambdamh ~ lognormal(2, 1);
  phi ~ exponential(p_phi);
  //phi_inv ~ poisson_log(5);
  
  
  //sampling distribution, Likelihood: give params, generate data
  //col(matrix x, int n) - The n-th column of matrix x. Here the number of infected people 
  //cases ~ neg_binomial_2(col(to_matrix(y), 9), phi);
  cases ~ neg_binomial_2(Incidence_total,1/phi);   // *ascert_frac
}


generated quantities {
  real t;
  real phi1;
  real s;
  real PIE;
  real w = 2*PIE/52;
  real R1 = sqrt((muh+sigma1)*(gammah+deltah+muh+tauh)*(mum+sigma2)*pih*pim*b4*beta4*muh*sigma1*sigma2*(b1*beta1+b2*beta2))*(1+ phi1*cos(w*(t-s)));
  real R2=(muh+sigma1)*(gammah+deltah+muh+tauh)*(mum+sigma2)*pih*mum;
  real R0=R1/R2;
  real pred_cases[n_days];
  pred_cases = neg_binomial_2_rng(Incidence_total, 1/phi);   // *ascert_frac
  //pred_cases = neg_binomial_2_rng(col(to_matrix(y), 9), phi);
}


