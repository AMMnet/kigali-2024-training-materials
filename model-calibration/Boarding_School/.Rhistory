library(matlib)
library("readxl")
setwd("C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/")
plot_path = "C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/"
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
#Monkeypox_Baseline Model SEIR Baseline, no demograpghy
# loading libraries
library(deSolve)
library(Matrix)
library(rTensor)
library(pillar)
library(tidyverse)
library(reshape2)
library(matlib)
library("readxl")
setwd("C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/")
plot_path = "C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/"
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
#Monkeypox_Baseline Model SEIR Baseline, no demograpghy
# loading libraries
library(deSolve)
library(Matrix)
library(rTensor)
library(pillar)
library(tidyverse)
library(reshape2)
library(matlib)
library("readxl")
setwd("C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/")
plot_path = "C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/"
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
#Monkeypox_Baseline Model SEIR Baseline, no demograpghy
# loading libraries
library(deSolve)
library(Matrix)
library(rTensor)
library(pillar)
library(tidyverse)
library(reshape2)
library(matlib)
library("readxl")
setwd("C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/")
plot_path = "C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/"
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
library(matlib)
library("readxl")
#Monkeypox_Baseline Model SEIR Baseline, no demograpghy
# loading libraries
library(deSolve)
library(Matrix)
library(rTensor)
library(pillar)
library(tidyverse)
library(reshape2)
library(matlib)
library("readxl")
setwd("C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/")
plot_path = "C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/"
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
plot_path
plot_path
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
#Monkeypox_Baseline Model SEIR Baseline, no demograpghy
# loading libraries
library(deSolve)
library(Matrix)
library(rTensor)
library(pillar)
library(tidyverse)
library(reshape2)
library(matlib)
library("readxl")
setwd("C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/")
plot_path = "C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/"
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
#Monkeypox_Baseline Model SEIR Baseline, no demograpghy
# loading libraries
library(deSolve)
library(Matrix)
library(rTensor)
library(pillar)
library(tidyverse)
library(reshape2)
library(matlib)
library("readxl")
setwd("C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/")
plot_path = "C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/"
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
#Monkeypox_Baseline Model SEIR Baseline, no demograpghy
# loading libraries
library(deSolve)
library(Matrix)
library(rTensor)
library(pillar)
library(tidyverse)
library(reshape2)
library(matlib)
library("readxl")
setwd("C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/")
plot_path = "C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/Model_ODE/"
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 30, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
source("Odefun.R")
source("Output.R")
N <- 763;
beta <- 1.73
gamma<- 0.54;#0.8799; incubation
IC = c(762,1,0);  # include one compartment for incidence
X0 = IC;
params  <- c(beta = beta,
N = N,
gamma=gamma)  # rate of going from I2 to R (recovery rate/2)
times <- seq(0, 20, by = 1) #values of alpha_vec affects the time here
out<-ode(X0, times, SEIR, params)
# summary(out)
# Calling the function that processes the ode solutions, save them in a file for each compartment, and save their corresponding plots
Output(out, plot_path)
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases <- read.csv(infected.csv)
sum(cases)
library(outbreaks) # data is contained inside this package
library(tidyverse)
library(rstan)
library(gridExtra)
library(shinystan)
library("bayesplot")
library("tidybayes")
library(matrixStats)
library(BH)
rstan_options (auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
head(influenza_england_1978_school)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed))+
labs(y = "Number of students in bed")
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases <- read.csv(infected.csv)
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases <- read.csv(Infected.csv)
sum(cases)
# total count
N <- 763;
library(BH)
rstan_options (auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
path="C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/"
setwd(path)
head(influenza_england_1978_school)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed))+
labs(y = "Number of students in bed")
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases <- read.csv(Infected_data.csv)
sum(cases)
# total count
N <- 763;
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases <- read.csv(infected_data.csv)
sum(cases)
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases <- read.csv(infected_data)
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases <- read.csv("infected_data.csv")
sum(cases)
cases
library(outbreaks) # data is contained inside this package
library(tidyverse)
library(rstan)
library(gridExtra)
library(shinystan)
library("bayesplot")
library("tidybayes")
library(matrixStats)
library(BH)
rstan_options (auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
path="C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/"
setwd(path)
head(influenza_england_1978_school)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed))+
labs(y = "Number of students in bed")
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases <- read.csv("infected_data.csv")
sum(cases)
# total count
N <- 763;
# times
n_days <- length(cases)
t <- seq(0, n_days, by = 1)
t0 = 0
t <- t[-1]
#initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# data for Stan
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases)
# number of MCMC steps
niter <- 2000
model <- stan_model(paste(path, "sir_negbin.stan", sep="") )
fit_sir_negbin <- sampling(model,data = data_sir,iter = niter,chains = 4, seed = 0)
# number of MCMC steps
niter <- 2000
model <- stan_model(paste(path, "sir_negbin.stan", sep="") )
fit_sir_negbin <- sampling(model,data = data_sir,iter = niter,chains = 4, seed = 0)
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases1 <- read.csv("infected_data.csv")
cases <- round(cases1)
sum(cases)
# total count
N <- 763;
# times
n_days <- length(cases)
t <- seq(0, n_days, by = 1)
t0 = 0
t <- t[-1]
#initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# data for Stan
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases)
# number of MCMC steps
niter <- 2000
model <- stan_model(paste(path, "sir_negbin.stan", sep="") )
fit_sir_negbin <- sampling(model,data = data_sir,iter = niter,chains = 4, seed = 0)
pars=c("beta","gamma","R0","recovery_time", "phi_inv")
print(fit_sir_negbin,pars = pars)
stan_dens(fit_sir_negbin,pars=pars,separate_chains = TRUE)
pairs(fit_sir_negbin,pars=pars,separate_chains = TRUE)
cases
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases1 <- read.csv("infected_data.csv")
cases2 <- cases1$I
cases<- round(cases2)
cases2
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases1 <- read.csv("infected_data.csv")
cases2
cases1
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases1 <- read.csv("infected_data.csv")
cases1
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases1 <- read.csv("infected_data.csv")
library(matrixStats)
library("bayesplot")
library("bayesplot")
library(outbreaks) # data is contained inside this package
library(tidyverse)
library(rstan)
library(gridExtra)
library(shinystan)
library("bayesplot")
library("tidybayes")
library(matrixStats)
library(BH)
rstan_options (auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
path="C:/Users/rabiu/OneDrive/Documents/R_code/Boarding_School/"
setwd(path)
head(influenza_england_1978_school)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed))+
labs(y = "Number of students in bed")
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases1 <- read.csv("infected_data.csv")
# time series of cases
#cases <- c(6,16,21,21,26,26,29,44,45,45,69,86,86,101,101,116,118) #influenza_england_1978_school$in_bed  # Number of students in bed
#cases<-c(influenza_england_1978_school$in_bed)
cases1 <- read.csv("infected_data.csv")
cases2 <- cases1$I
cases <- round(cases2)
cases
cases <- round(cases2)
sum(cases)
# total count
N <- 763;
# times
n_days <- length(cases)
t <- seq(0, n_days, by = 1)
t0 = 0
t <- t[-1]
#initial conditions
i0 <- 1
s0 <- N - i0
r0 <- 0
y0 = c(S = s0, I = i0, R = r0)
# data for Stan
data_sir <- list(n_days = n_days, y0 = y0, t0 = t0, ts = t, N = N, cases = cases)
# number of MCMC steps
niter <- 2000
model <- stan_model(paste(path, "sir_negbin.stan", sep="") )
fit_sir_negbin <- sampling(model,data = data_sir,iter = niter,chains = 4, seed = 0)
pars=c("beta","gamma","R0","recovery_time", "phi_inv")
print(fit_sir_negbin,pars = pars)
stan_dens(fit_sir_negbin,pars=pars,separate_chains = TRUE)
pairs(fit_sir_negbin,pars=pars,separate_chains = TRUE)
traceplot(fit_sir_negbin,pars=pars,separate_chains = TRUE)
smr_pred <- cbind(as.data.frame(summary(
fit_sir_negbin, pars = "pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(smr_pred) <- make.names(colnames(smr_pred)) # to remove % in the col names
ggplot(smr_pred, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "blue", alpha = 0.5) +
geom_line(mapping = aes(x = t, y = X50.), color = "blue") +
geom_point(mapping = aes(y = cases)) +
labs(x = "Day", y = "Number of students in bed")
params <- lapply(t, function(i){sprintf("y[%s,2]", i)}) #number of infected for each day
smr_pred <- cbind(as.data.frame(summary(
fit_sir_negbin, pars = "pred_cases", probs = c(0.05, 0.5, 0.95))$summary), t, cases)
colnames(smr_pred) <- make.names(colnames(smr_pred)) # to remove % in the col names
ggplot(smr_pred, mapping = aes(x = t)) +
geom_ribbon(aes(ymin = X5., ymax = X95.), fill = "blue", alpha = 0.5) +
geom_line(mapping = aes(x = t, y = X50.), color = "blue") +
geom_point(mapping = aes(y = cases)) +
labs(x = "Day", y = "Number of students in bed")
