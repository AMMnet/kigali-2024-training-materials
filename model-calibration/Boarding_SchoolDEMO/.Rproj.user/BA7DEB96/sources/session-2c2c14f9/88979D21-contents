//Monkeypox_Baseline Model SEIR only, #Monkeypox_Baseline Model SEIR only, with 1/phi
//No demography, but with transmission rate and scaling factor C
functions {
  real[] sir(real t, real[] y, real[] theta, 
             real[] x_r, int[] x_i) {
     
     
    int Nh = x_i[1];
    int Nm = x_i[2];
    
    real alphah = x_r[1];
    real betah = x_r[2];
    real muh = x_r[3];
    real vh = x_r[4];
    real deltah = x_r[5];
    real gammah = x_r[6];
    real alpham = x_r[7];
    real mum = x_r[8];
    real sigmam = x_r[9];
    real betam = x_r[10];
    real b;
    real Lambdah;
    real Lambdam;
    real PIE;
    real w;
    real a1;
    real Sh = y[1];
    real Eh = y[2];
    real Ih = y[3];
    real Rh = y[4];
    real Sm = y[5];
    real Em = y[6];
    real Im = y[7];
    real inci = y[8];
    
    real I0 = theta[1];
    real b1 = theta[2];
    real b2 = theta[3];
    real b3 = theta[4];
    real b4 = theta[5];
    real b5 = theta[6];
    real b6 = theta[7];
    real b7 = theta[8];
    real b8 = theta[9];
    real b9 = theta[10];
    real b10 = theta[11];
    real b11 = theta[12];
    real b12 = theta[13];
    real b13 = theta[14];
    real b14 = theta[15];
    real b15 = theta[16];
    real b16 = theta[17];
    real b17 = theta[18];
    real b18 = theta[19];
    real b19 = theta[20];
    real b20 = theta[21];
    real b21 = theta[22];
    real b22 = theta[23];
    real b23 = theta[24];
    real b24 = theta[25];

     if (t <= 2){
    		b = b1;
     } else if (t > 2 && t <= 4) {
     		b = b2;
     } else if (t > 4 && t <= 6) {
     		b = b3;
     } else if (t > 6 && t <= 8) {
     		b = b4;
     } else if (t > 8 && t <= 10) {
     		b = b5;
     } else if (t > 10 && t <= 12) {
     		b = b6;
     } else if (t > 12 && t <= 14) {
     		b = b7;
     } else if (t > 14 && t <= 16) {
     		b = b8;
     } else if (t > 16 && t <= 18) {
     		b = b9;
     } else if (t > 18 && t <= 20) {
     		b = b10;
     } else if (t > 20 && t <= 22) {
     		b = b11;
     } else if (t > 22 && t <= 24) {
     		b = b12;
     } else if (t > 24 && t <= 26) {
     		b = b13;
     } else if (t > 26 && t <= 28) {
     		b = b14;
     } else if (t > 28 && t <= 30) {
     		b = b15;
     } else if (t > 30 && t <= 32) {
     		b = b16;
     } else if (t > 32 && t <= 34) {
     		b = b17;
     } else if (t > 34 && t <= 36) {
     		b = b18;
     } else if (t > 36 && t <= 38) {
     		b = b19;
     } else if (t > 38 && t <= 40) {
     		b = b20;
     } else if (t > 40 && t <= 42) {
         b = b21;
     } else if (t > 42 && t <= 44) {
     		b = b22;
     } else if (t > 44 && t <= 46) {
     		b = b23;
     } else {
     		b = b24;
     }  
     PIE= 22.0/7;
     w = 2*PIE/12;
     a1 = 250000;
     Lambdah = b * betah*(1+a1*cos(w*t));
     Lambdam = b * betam*(1+a1*cos(w*t));
     
    real dSh_dt = alphah - (Lambdah * Im / Nh) * Sh - muh * Sh;
    real dEh_dt = (Lambdah * Im / Nh) * Sh - (vh+muh) * Eh;
    real dIh_dt = vh * Eh - (gammah+muh+deltah) * Ih;
    real dRh_dt =  gammah * Ih - muh * Rh;
    real dSm_dt = alpham - (b * Lambdam * Ih / Nh) * Sm - mum * Sm;
    real dEm_dt = (b * Lambdam * Ih / Nh) * Sm - (sigmam + mum)* Em;
    real dIm_dt = sigmam * Em- mum * Im;
    real dInci_dt = vh * Eh;
    
    return {dSh_dt, dEh_dt, dIh_dt, dRh_dt, dSm_dt, dEm_dt, dIm_dt, dInci_dt};
  }
}

data { // this one contains unestimated params
  int<lower=1> n_days;
  real y0_vars[7]; //initial conditions
  real t0;
  real ts[n_days];
  int cases[n_days];
  int Nh;
  int Nm;
  real alphah;
  real muh;
  real vh;
  real deltah;
  real gammah;
  real alpham;
  real mum;
  real sigmam;
  real betam;
  real betah;
  real p_phi;
}
// declare the dimension of unestm params and list them
transformed data {
  int x_i[2];
  real x_r[10];
  
  x_i[1] = Nh;
  x_i[2] = Nm;
  
  x_r[1] = alphah;
  x_r[2] = betah;
  x_r[3] = muh;
  x_r[4] = vh;
  x_r[5] = deltah;
  x_r[6] = gammah;
  x_r[7] = alpham;
  x_r[8] = mum;
  x_r[9] = sigmam;
  x_r[10] =  betam;
}
parameters{
  real<lower=0, upper=2> b1;
  real<lower=0, upper=2> b2;
  real<lower=0, upper=2> b3;
  real<lower=0, upper=2> b4;
  real<lower=0, upper=2> b5;
  real<lower=0, upper=2> b6;
  real<lower=0, upper=2> b7;
  real<lower=0, upper=2> b8;
  real<lower=0, upper=2> b9;
  real<lower=0, upper=2> b10;
  real<lower=0, upper=2>  b11;
  real<lower=0, upper=2> b12;
  real<lower=0, upper=2> b13;
  real<lower=0, upper=2> b14;
  real<lower=0, upper=2> b15;
  real<lower=0, upper=2> b16;
  real<lower=0, upper=2> b17;
  real<lower=0, upper=2> b18;
  real<lower=0, upper=2> b19;
  real<lower=0, upper=2> b20;
  real<lower=0, upper=2> b21;
  real<lower=0, upper=2> b22;
  real<lower=0, upper=2> b23;
  real<lower=0, upper=2> b24;
  real<lower=0, upper=5000> I0;
  //real<lower=0> betam;
  //real<lower=0> betamh;
	real<lower=0> phi;
}

transformed parameters{
  real y[n_days, 8]; // no of compartm
  real y0[8];  // initial state
  row_vector[7] y0_vec;         // 7 initial conditions vector, out of 8
  row_vector[8] y0_temp;         // State variables +incidence, 8 out of 8
 
   
  vector[n_days] Cum_incidence; // overall case incidence by day
	vector[n_days] Incidence_total; 	// incidence

  
	y0_vec = to_row_vector(y0_vars);
	y0_temp[1] =  y0_vec[1];   // initial susceptibles
	y0_temp[2:3] =  y0_vec[2:3]*I0;   // exposed and infected
	y0_temp[4] =  y0_vec[4];   // recovered
	y0_temp[5] =  y0_vec[5]; 
	y0_temp[6] =  y0_vec[6]; 
	y0_temp[7] =  y0_vec[7]; 
  y0_temp[8] =  0;   // incidence
   
	y0 = to_array_1d(y0_temp);


  {
    real theta[25];
    theta[1] = I0;
    theta[2] = b1;
    theta[3] = b2;
    theta[4] = b3;
    theta[5] = b4;
    theta[6] = b5;
    theta[7] = b6;
    theta[8] = b7;
    theta[9] = b8;
    theta[10] = b9;
    theta[11] = b10;
    theta[12] = b11;
    theta[13] = b12;
    theta[14] = b13;
    theta[15] = b14;
    theta[16] = b15;
    theta[17] = b16;
    theta[18] = b17;
    theta[19] = b18;
    theta[20] = b19;
    theta[21] = b20;
    theta[22] = b21;
    theta[23] = b22;
    theta[24] = b23;
    theta[25] = b24;
    y = integrate_ode_rk45(sir, y0, t0, ts, theta, x_r, x_i);

    for(i in 1:n_days) {
				Cum_incidence[i] = y[i,8] ;
		  if (i == 1){
			  Incidence_total[i] =  Cum_incidence[i];
		  } else {
		  	Incidence_total[i] =  Cum_incidence[i] - Cum_incidence[i-1];
		 }
		}
    
  }
}


model {
  //priors
  b1 ~ lognormal(2, 1); //upper and lower bound
  b2 ~ lognormal(2, 1); //upper and lower bound
  b3 ~ lognormal(2, 1); //upper and lower bound
  b4 ~ lognormal(2, 1); //upper and lower bound
  b5 ~ lognormal(2, 1); //upper and lower bound
  b6 ~ lognormal(2, 1); //upper and lower bound
  b7 ~ lognormal(2, 1); //upper and lower bound
  b8 ~ lognormal(2, 1); //upper and lower bound
  b9 ~ lognormal(2, 1); //upper and lower bound
  b10 ~ lognormal(2, 1); //upper and lower bound
  b11 ~ lognormal(2, 1); //upper and lower bound
  b12 ~ lognormal(2, 1); //upper and lower bound
  b13 ~ lognormal(2, 1); //upper and lower bound
  b14 ~ lognormal(2, 1); //upper and lower bound
  b15 ~ lognormal(2, 1); //upper and lower bound
  b16 ~ lognormal(2, 1); //upper and lower bound
  b17 ~ lognormal(2, 1); //upper and lower bound
  b18 ~ lognormal(2, 1); //upper and lower bound
  b19 ~ lognormal(2, 1); //upper and lower bound
  b20 ~ lognormal(2, 1); //upper and lower bound
  b21 ~ lognormal(2, 1); //upper and lower bound
  b22 ~ lognormal(2, 1); //upper and lower bound
  b23 ~ lognormal(2, 1); //upper and lower bound
  b24 ~ lognormal(2, 1); //upper and lower bound
  I0 ~ lognormal(2, 1);
  phi ~ exponential(p_phi);
  //phi_inv ~ poisson_log(5);
  
  
  //sampling distribution, Likelihood: give params, generate data
  //col(matrix x, int n) - The n-th column of matrix x. Here the number of infected people 
  // cases ~ neg_binomial_2(col(to_matrix(y), 3), phi);
  cases ~ neg_binomial_2(Incidence_total,1/phi);   // *ascert_frac
}


generated quantities {
  //real R0 = beta*(1/gamma);
  real Lambdah1 = betah * b1;
  real Lambdah2 = betah * b2;
  real Lambdah3 = betah * b3;
  real Lambdah4 = betah * b4;
  real Lambdah5 = betah * b5;
  real Lambdah6 = betah * b6;
  real Lambdah7 =  betah * b7;
  real Lambdah8 =  betah * b8;
  real Lambdah9 =  betah * b9;
  real Lambdah10 = betah * b10;
  real Lambdah11 = betah* b11;
  real Lambdah12 = betah * b12;
  real Lambdah13 = betah * b13;
  real Lambdah14 = betah * b14;
  real Lambdah15 = betah * b15;
  real Lambdah16 = betah * b16;
  real Lambdah17 = betah * b17;
  real Lambdah18 = betah * b18;
  real Lambdah19 =  betah * b19;
  real Lambdah20 =  betah * b20;
  real Lambdah21 =  betah * b21;
  real Lambdah22 = betah * b22;
  real Lambdah23 = betah* b23;
  real Lambdah24 = betah * b24;

  real pred_cases[n_days];
  pred_cases = neg_binomial_2_rng(Incidence_total, 1/phi);   // *ascert_frac
  //pred_cases = neg_binomial_2_rng(col(to_matrix(y), 3), phi);
}
